下载Git：https://git-scm.com/downloads
安装Git
打开Git命令行：开始->Git->Git Bash
查看Git命令帮助手册
git --help
设置姓名、邮箱（--global表示将该配置修改操作应用到全局）
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
查看全部配置信息
git config --list
查看指定配置信息
git config <key>
将当前目录变成Git本地仓库（生成.git目录，其中包含Git本地仓库的全部信息）
git init
把文件添加到Git本地仓库暂存区（stage）
git add 文件名.文件类型
#跟踪新文件
#将已跟踪的文件的修改内容添加到暂存区
#将合并时有冲突的文件标记为已解决冲突
把文件提交到Git本地仓库（当前分支）
git commit -m "本次提交说明"
把已跟踪的文件暂存并提交到Git本地仓库（当前分支）
git commit -a -m "本次提交说明" #跳过git add步骤，但是不会暂存并提交未跟踪的文件
查看git仓库当前状态（包含当前所在分支、已跟踪的文件是否被修改、是否存在未跟踪的文件、当前分支同远程服务器上对应的分支是否偏离等信息）
git status
查看git仓库的修改内容
git diff
查看指定文件的修改内容
git diff 文件名.文件类型
提交修改
git add 文件名.文件类型
git commit -m "本次提交说明"
查看提交日志（按时间倒序），包含提交操作版本号（16进制SHA1）、作者、时间
git log
查看提交日志（--pretty用于指定log显示格式）
git log --pretty=oneline #精简版，仅显示提交操作版本号、本次提交说明
git log --pretty=format:"定制的格式"
#%h简短id、%an作者、%ad提交时间、%s提交说明
重新提交（只会有一个提交记录）
git add 忘记提交的修改
git commit --amend
回退到上一个版本
git reset --hard HEAD^
回退到前n个版本
git reset --hard HEAD~n
回退到指定版本
git reset --hard 提交操作版本号
查看操作记录
git reflog
查看工作区指定文件和版本库中最新版本的区别
git diff HEAD -- 文件名.文件类型
撤销工作区（本地）指定文件的修改
git checkout -- 文件名.文件类型
把add到暂存区stage的修改回退到工作区
git reset HEAD 文件名.文件类型
删除本地文件并取消版本库中对指定文件的追踪
git rm 文件名.文件类型
git commit -m "本次提交说明"
取消版本库中对指定文件的追踪，本地保留该文件
git rm --cached 文件名.文件类型
git commit -m "本次提交说明"
重命名版本库中已跟踪的文件
git mv 原文件名 新文件名
创建SSH Key（生成的Key保存在/系统盘/用户/用户名/.ssh）
ssh-keygen -t rsa -C "邮箱"
将SSH Key添加到个人GitHub
登录GitHub->Settings->SSH and GPG keys->new SSH key
自定义Title，Key文本框中添加id_rsa.pub文件的内容
Add key
将本地Git仓库与GitHub的远程仓库关联（远程仓库地址以.git结尾，origin为远程仓库别名）
git remote add origin GitHub仓库地址 #origin为远程仓库名
查看关联的远程仓库名
git remote
重命名远程仓库
git remote rename 原名 新名
查看关联的远程仓库信息
git remote show 远程仓库名
查看当前账户对远程仓库的读写权限
git remote -v
删除本地仓库与远程仓库的关联
git remote rm origin
把提交到本地Git仓库的内容推送到远程仓库（主分支）
git push -u origin master #第一次
git push origin master #后续提交
git push origin 分支名 #推送到远程仓库的指定分支
将远程仓库克隆到本地（支持HTTP协议https://、SSH协议git@、GIT协议git://）
git clone Git远程仓库地址
创建分支
git branch 分支名
查看分支（*为当前分支）
git branch
查看各个分支当前所指向的对象
git log --oneline --decorate
切换分支
git checkout 分支名
创建并切换分支
git checkout -b 分支名
创建和远程仓库分支对应的分支
git checkout -b 分支名 origin/远程仓库分支名
合并指定分支到当前分支（默认使用Fast forward模式）
git merge 分支名 -m ""
删除指定分支（已执行过合并操作）
git branch -d 分支名
强制删除指定分支（未执行过合并操作）
git branch -D 分支名
查看分支合并图
git log --graph
合并指定分支到当前分支（使用普通模式），并创建一个新的commit
git merge --no-ff -m "本次提交说明" 分支名
储藏工作区中已被版本库跟踪的文件的修改
git stash
储藏工作区中的所有修改内容（包括未跟踪的文件）
git stash -u
查看工作栈储藏的修改列表
git stash list
恢复工作栈储藏的指定修改内容到工作区
git stash apply <stash_id> #恢复后不删除stash的内容
git stash pop <stash_id> #恢复后删除stash的内容
#不指定stash_id，默认恢复最近一次stash的内容
删除工作栈储藏的指定修改内容
git stash drop <stash_id>
创建本地仓库的分支与远程仓库的分支的链接关系
git branch --set-upstream-to=origin/远程仓库分支名 本地仓库分支名
从远程仓库抓取当前分支的最新提交
git pull
将本地未push的分叉提交历史整理成直线
git rebase
#目的：使我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
对当前分支的最新提交创建标签
git tag 标签名 #例：v1.0
git tag -a 标签名 -m "标签说明" #创建带有说明的标签
对当前分支的指定提交创建标签
git tag 标签名 提交操作版本号
查看当前分支的所有标签
git tag
查看标签信息
git show 标签名
删除本地指定标签
git tag -d 标签名
将指定标签推送到远程仓库
git push origin 标签名
git push origin --tags #将所有本地标签推送到远程仓库
删除远程仓库的指定标签
git tag -d 标签名
git push origin :refs/tags/标签名

==================================================================
其他命令：
创建目录
mkdir 目录名称
进入目录
cd 目录名称
显示当前目录
pwd
显示当前目录下的可见文件及目录
ls
dir
显示当前目录下的全部文件及文件夹（包括储藏的文件及目录）
ls -ah
打开文件
cat 文件名.文件类型
删除文件
rm 文件名.文件类型

