安装Git
* 下载Git：https://git-scm.com/download/win
* 运行Git.exe安装Git
* 打开Git命令行：开始->Git->Git Bash，弹出Git命令行窗口表示Git安装成功
卸载Git
关闭所有Git程序，打开Git安装目录，运行unins001.exe程序卸载Git

查看Git命令帮助手册
git --help

设置姓名、邮箱（--global表示将该配置修改操作应用到全局）
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
查看全部配置信息
git config --list
查看指定配置信息
git config <key>

创建并初始化本地仓库
git init
#将当前目录变成一个Git本地仓库
#生成.git目录，其中包含Git本地仓库的全部信息
克隆现有的仓库
git clone [url]
上述命令执行的操作包含：
* 在当前目录下创建一个包含远程仓库名的目录（例：learngit）
* 在learngit目录下初始化.git目录
* 从远程仓库拉取全部数据放入.git目录
* 从.git目录中读取最新版本的文件复制到learngit目录中
克隆现有的仓库并自定义本地仓库名
git clone [url] [local repository name]
删除本地仓库
rm -rf .git

Git管理的文件的三种状态：
已提交（committed）、已修改（modified）、已暂存（staged）
Git项目的三个工作区域：
工作目录（Working Directory）->暂存区（Staging Area）->Git仓库（.git Directory/Repository）

工作目录中文件的两种状态：
已跟踪、未跟踪

Git基本工作流程：
* 在工作目录中修改文件（包括修改文件内容、重命名文件、删除文件操作）
* 将文件的快照存储到暂存区
* 将暂存区中文件的快照永久性存储到Git仓库

文件状态变化周期：
Untracked->add->Staged->commit->Unmodified
Unmodified->edit->Modified->add->Staged->commit->Unmodified
Unmodified->rm --cached->untracked

查看git仓库当前状态
git status
* 当前所在分支
* 已跟踪的文件是否被修改过
* 是否存在未跟踪的文件
* 当前分支同远程服务器上对应的分支是否偏离

跟踪新文件/暂存指定文件
git add <file> #如果参数是目录，递归跟踪该目录下的所有文件
#add命令执行的操作包括：
* 跟踪新文件
* 将已跟踪的文件添加到暂存区（如果没有修改，add操作不执行）
* 将合并时有冲突的文件标记为已解决冲突
跟踪/暂存全部文件
git add *
把暂存区的修改内容提交到Git本地仓库
git commit -m "提交信息"
#commit命令执行的结果信息包括：
* 本次提交操作所在分支
* 本次提交操作的校验和
* 本次提交修改的文件数、增加的行数、删除的行数
把已跟踪的文件的修改内容暂存并提交到Git本地仓库（跳过git add步骤）
git commit -a -m "提交信息" #不会暂存并提交未跟踪和未修改的文件
重新提交（只会有一个提交记录）
git add 忘记提交的修改
git commit --amend -m "提交信息"

删除工作区所有未跟踪的文件
git clean -df
删除指定文件
rm <file_name> #不论文件是否已跟踪
撤销工作区指定文件的修改
git checkout -- <file>
把暂存区指定文件的修改回退到工作区
git reset HEAD <file>
回退到上一个版本
git reset --hard HEAD^
回退到前n个版本
git reset --hard HEAD~n
回退到指定版本（完整回退）
git reset --hard 提交操作版本号 #工作区、暂存区、版本库回退到指定版本
回退到指定版本（部分回退）
git reset --mixed 提交操作版本号 #暂存区、版本库回退到指定版本
git reset --soft 提交操作版本号 #版本库回退到指定版本

删除工作区已追踪的文件并取消版本库中对该文件的追踪
git rm <file> #未暂存修改
git rm \*.类型 #删除指定类型的文件并取消版本库中对该类型文件的追踪
git rm \*<end> #删除以指定字符结尾的所有文件
git rm <dir>/ #删除指定目录下的所有文件 
git rm -f <file> #已暂存修改，强制删除
取消版本库中对指定文件的追踪，本地保留该文件
git rm --cached <file>
重命名版本库中已跟踪的文件
git mv <原文件名> <新文件名>

忽略文件
https://github.com/github/gitignore

查看git仓库的修改内容
git diff
查看指定文件的修改内容
git diff <file>
查看提交日志（按时间倒序）
git log
#日志包含：提交操作版本号（16进制SHA1）、作者、时间
查看提交日志（--pretty用于指定log显示格式）
git log --pretty=oneline #将每个提交放在一行显示
git log --pretty=format:"定制的格式"
#%h简短id、%an作者、%ad作者提交时间、%s提交说明
查看提交日志，显示每次提交的内容差异
git log -p
查看指定文件的提交日志
git log <file>
查看操作记录
git reflog
查看工作区指定文件和版本库中最新版本的区别
git diff HEAD -- <file>

远程仓库（Remote Repository）
创建SSH Key（生成的Key保存在/系统盘/用户/用户名/.ssh）
ssh-keygen -t rsa -C "邮箱"
将SSH Key添加到个人GitHub
登录GitHub->Settings->SSH and GPG keys->new SSH key
自定义Title，Key文本框中添加id_rsa.pub文件的内容
Add key
将本地Git仓库与GitHub的远程仓库关联（远程仓库地址以.git结尾，origin为远程仓库别名）
git remote add <alias> <url> #参数：远程仓库别名、地址
查看关联的远程仓库名
git remote
重命名远程仓库
git remote rename <原名> <新名>
查看关联的远程仓库信息
git remote show <alias>
#信息内容包括：
* 本地仓库指定分支执行push操作推动到远程仓库的分支名
* 本地不存在的远程分支
* 本地存在但远程仓库已经移除的分支
* 执行pull操作会自动合并的分支名
查看当前账户对远程仓库的读写权限及地址
git remote -v
删除本地仓库与远程仓库的关联
git remote rm origin
从远程仓库拉取本地没有的数据
git fetch <alias> #不填参数，默认从本地仓库关联的远程仓库拉取数据
#fetch操作不会自动合并或修改工作区的内容，发生冲突时需要手动合并
从远程仓库拉取当前分支的最新提交
git pull
#pull操作将自动合并工作区当前分支与远程仓库对应分支的修改
把提交到本地仓库的内容推送到远程仓库
git push <alias> <branch> #参数：远程仓库别名、分支名
#限制条件：
* 当前账户拥有远程仓库的写入权限
* 从clone到push之间没有人对该远程仓库执行过push操作
#如果当前账户拥有远程仓库的写入权限，但执行push推送失败时，先执行fetch操作并确认变更内容后再执行push操作
查看远程仓库的分支
git branch -r
从远程仓库拉取分支到本地Git仓库
git checkout -b 本地分支名 origin/远程仓库分支名
删除远程仓库的分支
git push --delete origin 分支名
将远程仓库克隆到本地
git clone <url>
#克隆到本地的远程仓库的alias默认为origin
#支持HTTP协议https://、SSH协议user@server:path/to/repo.git、GIT协议git://
创建分支
git branch 分支名
查看分支（*为当前分支）
git branch
查看各个分支当前所指向的对象
git log --oneline --decorate
切换分支
git checkout 分支名
创建并切换分支
git checkout -b 分支名
创建和远程仓库分支对应的分支
git checkout -b 分支名 origin/远程仓库分支名
合并指定分支到当前分支（默认使用Fast forward模式）
git merge 分支名 -m "合并操作描述"
删除指定分支（已执行过合并操作）
git branch -d 分支名
强制删除指定分支（未执行过合并操作）
git branch -D 分支名
查看分支合并图
git log --graph
合并指定分支到当前分支（使用普通模式），并创建一个新的commit
git merge --no-ff -m "提交信息" 分支名
储藏工作区中已被版本库跟踪的文件的修改
git stash
储藏工作区中的所有修改内容（包括未跟踪的文件）
git stash -u
查看工作栈储藏的修改列表
git stash list
恢复工作栈储藏的指定修改内容到工作区
git stash apply <stash_id> #恢复后不删除stash的内容
git stash pop <stash_id> #恢复后删除stash的内容
#不指定stash_id，默认恢复最近一次stash的内容
删除工作栈储藏的指定修改内容
git stash drop <stash_id>
创建本地仓库的分支与远程仓库的分支的链接关系
git branch --set-upstream-to=origin/远程仓库分支名 本地仓库分支名
将本地未push的分叉提交历史整理成直线
git rebase
#目的：使我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
对当前分支的最新提交创建标签
git tag 标签名 #例：v1.0
git tag -a 标签名 -m "标签说明" #创建带有说明的标签
对当前分支的指定提交创建标签
git tag 标签名 提交操作版本号
查看当前分支的所有标签
git tag
查看标签信息
git show 标签名
删除本地指定标签
git tag -d 标签名
将指定标签推送到远程仓库
git push origin 标签名
git push origin --tags #将所有本地标签推送到远程仓库
删除远程仓库的指定标签
git tag -d 标签名
git push origin :refs/tags/标签名

==================================================================
其他命令：
创建目录
mkdir 目录名称
进入目录
cd 目录名称
显示当前目录
pwd
显示当前目录下的可见文件及目录
ls
dir
显示当前目录下的全部文件及文件夹（包括储藏的文件及目录）
ls -ah
新建文件
vi <file_name>
#默认处于命令模式
#命令模式下按i切换到编辑模式，左下角有“-- INSERT --”或“-- 插入 --”字样
#编辑模式下按ESC切换到命令模式
#常用命令：
:+q 退出编辑，如果文件被修改过，则会报错
:+q! 强制退出编辑，如果文件被修改过，则会丢弃此次修改
:x 保存修改并退出编辑 
打开文件
cat <file_name>
重命名文件
mv <原文件名> <新文件名>
删除文件
rm <file_name>
滚动到最后一行并置于窗口顶部（假装清屏）
clear
